import numpy as np
from collections import Counter

class KNNClassifier:
    def __init__(self, k=3):
        self.k = k
        self.X_train = None
        self.y_train = None

    def fit(self, X, y):
        self.X_train = X
        self.y_train = y

    def predict(self, X):
        predictions = []
        for sample in X:
            distances = [np.linalg.norm(sample - x) for x in self.X_train]
            k_indices = np.argsort(distances)[:self.k]
            k_nearest_labels = [self.y_train[i] for i in k_indices]
            most_common = Counter(k_nearest_labels).most_common(1)
            predictions.append(most_common[0][0])
        return np.array(predictions)

# Ejemplo de implementacion
# Datos de entrenamiento
X_train = np.array([[1, 2], [1.5, 1.8], [5, 8], [8, 8], [1, 0.6], [9, 11]])
y_train = np.array([0, 0, 1, 1, 0, 1])

# Datos de prueba
X_test = np.array([[1, 3], [6, 9], [0, 0], [5, 7]])

# Crear y entrenar el clasificador kNN
knn = KNNClassifier(k=2)
knn.fit(X_train, y_train)

# Predecir las etiquetas para los datos de prueba
predictions = knn.predict(X_test)
print("Predicciones:", predictions)
