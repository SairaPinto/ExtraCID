import numpy as np
from sklearn.datasets import make_blobs
import matplotlib.pyplot as plt

#make_blobs de sklearn.datasets genera datos aleatorios
#numpy para operaciones matriciales y matplotlib para visualización

class KMeans:
    def __init__(self, n_clusters=3, max_iters=100):
        self.n_clusters = n_clusters
        self.max_iters = max_iters
        self.centroids = None

    def fit(self, X):
        # Inicialización de los centroides aleatoriamente
        random_indices = np.random.choice(X.shape[0], self.n_clusters, replace=False)
        self.centroids = X[random_indices]

        for _ in range(self.max_iters):
            # Asignar puntos al grupo más cercano (calculando distancias)
            clusters = [[] for _ in range(self.n_clusters)]
            for point in X:
                distances = [np.linalg.norm(point - centroid) for centroid in self.centroids]
                closest_cluster = np.argmin(distances)
                clusters[closest_cluster].append(point)

            # Calcular nuevos centroides
            new_centroids = []
            for cluster in clusters:
                new_centroid = np.mean(cluster, axis=0)
                new_centroids.append(new_centroid)
            new_centroids = np.array(new_centroids)

            # Verificar convergencia
            if np.all(self.centroids == new_centroids):
                break

            self.centroids = new_centroids

    def predict(self, X):
        # Predecir el grupo al que pertenecen los puntos
        clusters = [[] for _ in range(self.n_clusters)]
        for point in X:
            distances = [np.linalg.norm(point - centroid) for centroid in self.centroids]
            closest_cluster = np.argmin(distances)
            clusters[closest_cluster].append(point)
        return clusters

# Ejemplo de uso con datos generados aleatoriamente
X, _ = make_blobs(n_samples=300, centers=4, cluster_std=0.60, random_state=0)

kmeans = KMeans(n_clusters=4)
kmeans.fit(X)

# Predecir los grupos y graficar los resultados
clusters = kmeans.predict(X)
for i, cluster in enumerate(clusters):
    cluster = np.array(cluster)
    plt.scatter(cluster[:, 0], cluster[:, 1], label=f'Cluster {i+1}')

plt.scatter(kmeans.centroids[:, 0], kmeans.centroids[:, 1], marker='*', s=200, c='red', label='Centroids')
plt.legend()
plt.title('KMeans Clustering')
plt.show()
